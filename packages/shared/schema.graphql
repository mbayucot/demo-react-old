type CollectionMetadata {
  currentPage: Int!
  limitValue: Int!
  totalCount: Int!
  totalPages: Int!
}

type Comment {
  ancestry: String
  body: String
  children: [Comment!]
  createdAt: ISO8601DateTime!
  id: ID!
  parentId: ID!
  postId: Int!
  updatedAt: ISO8601DateTime!
  user: User
}

"""
Autogenerated return type of CreateComment
"""
type CreateCommentPayload {
  comment: Comment
  errors: [UserError!]
}

"""
Autogenerated return type of CreatePost
"""
type CreatePostPayload {
  errors: [UserError!]
  post: Post
}

"""
Autogenerated return type of CreateSubscription
"""
type CreateSubscriptionPayload {
  errors: [UserError!]
  user: User!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  errors: [UserError!]
  user: User
}

"""
Autogenerated return type of DestroyPost
"""
type DestroyPostPayload {
  post: Post!
}

"""
Autogenerated return type of DestroyUser
"""
type DestroyUserPayload {
  user: User!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  createComment(body: String, parentId: ID, postId: ID): CreateCommentPayload!
  createPost(body: String, tagList: [String!], title: String): CreatePostPayload!
  createSubscription(token: String!): CreateSubscriptionPayload!
  createUser(email: String, firstName: String, lastName: String, password: String): CreateUserPayload!
  destroyPost(id: ID!): DestroyPostPayload!
  destroyUser(id: ID!): DestroyUserPayload!
  reactPost(id: ID!, weight: ID!): ReactPostPayload!
  updatePost(attributes: PostAttributes!, id: ID!): UpdatePostPayload!
  updateUser(attributes: UserAttributes!, id: ID): UpdateUserPayload!
}

type Plan {
  amount: Int!
  id: ID!
  priceId: Int!
  productId: Int!
}

type Post {
  body: String
  comments: [Comment!]
  createdAt: ISO8601DateTime!
  id: ID!
  slug: String
  tagList: [String!]
  tags: [Tag!]
  title: String
  updatedAt: ISO8601DateTime!
  user: User
}

"""
Attributes for creating or updating a blog post
"""
input PostAttributes {
  """
  Full body of the post
  """
  body: String

  """
  Tags of post
  """
  tagList: [String!]

  """
  Header for the post
  """
  title: String
}

type PostCollection {
  collection: [Post!]!
  metadata: CollectionMetadata!
}

type Query {
  plans: [Plan!]
  post(id: ID!): Post!
  posts(page: Int, query: String, sort: String, tag: String): PostCollection
  tags(query: String): [Tag!]
  user(id: ID!): User!
  users(page: Int, query: String): UserCollection
}

"""
Autogenerated return type of ReactPost
"""
type ReactPostPayload {
  post: Post!
}

type Tag {
  id: ID!
  name: String
}

"""
Autogenerated return type of UpdatePost
"""
type UpdatePostPayload {
  errors: [UserError!]
  post: Post!
}

"""
Autogenerated return type of UpdateUser
"""
type UpdateUserPayload {
  errors: [UserError!]
  user: User!
}

type User {
  createdAt: ISO8601DateTime!
  email: String!
  encryptedPassword: String!
  firstName: String
  id: ID!
  lastName: String
  name: String
  rememberCreatedAt: ISO8601DateTime
  resetPasswordSentAt: ISO8601DateTime
  resetPasswordToken: String
  role: Int
  updatedAt: ISO8601DateTime!
}

"""
Attributes for creating or updating a blog post comment
"""
input UserAttributes {
  """
  Full body of the comment
  """
  email: String

  """
  Full body of the comment
  """
  firstName: String

  """
  Full body of the comment
  """
  lastName: String
}

type UserCollection {
  collection: [User!]!
  metadata: CollectionMetadata!
}

"""
A user-readable error
"""
type UserError {
  """
  A description of the error
  """
  message: String!

  """
  Which input value this error came from
  """
  path: [String!]
}
